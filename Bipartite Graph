#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
private:
    // Helper function to perform BFS and check for bipartiteness
    bool check(int start, int V, vector<vector<int>>& graph, int col[]) {
        queue<int> q;
        q.push(start);
        col[start] = 0;  // Start coloring the node with color 0

        while (!q.empty()) {
            int node = q.front();
            q.pop();

            for (auto it : graph[node]) {
                // If neighbor is not colored, color with opposite color
                if (col[it] == -1) {
                    col[it] = !col[node];
                    q.push(it);
                }
                // If neighbor has same color, graph is not bipartite
                else if (col[it] == col[node]) {
                    return false;
                }
            }
        }
        return true;
    }

public:
    // Function to check if the graph is bipartite
    bool isBipartite(vector<vector<int>>& graph) {
        int V = graph.size();
        int col[V];
        // Initialize all nodes as uncolored
        for (int i = 0; i < V; i++) {
            col[i] = -1;
        }

        // Check each component of the graph
        for (int i = 0; i < V; i++) {
            if (col[i] == -1) {
                if (!check(i, V, graph, col)) {
                    return false;
                }
            }
        }
        return true;
    }
};

// Main function to test the code
int main() {
    Solution sol;

    // Example 1: Bipartite graph
    vector<vector<int>> graph1 = {
        {1, 3},
        {0, 2},
        {1, 3},
        {0, 2}
    };
    cout << "Graph 1 is " << (sol.isBipartite(graph1) ? "Bipartite" : "Not Bipartite") << endl;

    // Example 2: Not bipartite graph
    vector<vector<int>> graph2 = {
        {1, 2, 3},
        {0, 2},
        {0, 1, 3},
        {0, 2}
    };
    cout << "Graph 2 is " << (sol.isBipartite(graph2) ? "Bipartite" : "Not Bipartite") << endl;

    return 0;
}
